#!/usr/bin/env python3
# Adapted by BitMan64 for Holoclock for the contest at
# https://www.instructables.com/contest/clocks2020/
# Thanks to CoolCat467 for his original MirrorText program at
# https://github.com/Cat-Software-Ink/Reversed-Clocks/blob/master/mirroredtext.py

SCREENSIZE = (800, 480)
NAME = '12Hr Clock'
__version__ = '5.0.2'

# Only need to run at 1 frame per seccond really, but if the program
# is de-syncronized from the system clock, our clock won't really
# look correct, and be jerking from number to number.

# 1 fps = 1 screen update every 1 seccond, so
# 2 fps = 2 screen updates every seccond, fixing our de-sync problem.
FPS = 2

GREEN = (0, 255, 0)
BLACK = (0, 0, 0)

import pygame
from pygame.locals import *
import time

def GetTime():
    # Returns Current Time
    
    #How the parsing works:
    # time.asctime() returns something like 'Sun Jan 1 12:00:00 2020'
    
    # .split(' ') of a string will return a list generated by splitting the
    # string by the split value, and in this case would make the time
    # into ['Sun', 'Jan', '1', '12:00:00', '2020']
    
    # Then, we get the time by selecting the data at the index of 3 in
    # our list, in this case returning '12:00:00'
    return time.asctime().split(' ')[3]

def run():
    # Main script
    
    pygame.init() # Initialize pygame
    
    clock = pygame.time.Clock() # Create a clock for everything

    screen = pygame.display.set_mode(SCREENSIZE, 0, 32) # Initialize the screen
    pygame.display.set_caption(NAME)# Set the caption instead of 'Pygame Window'
    
    font = pygame.font.SysFont('digital-7', 280) # Initialize font
    
    # Get the center of our screen
    x, y = SCREENSIZE
    center = [x/2, y/2]
    
    RUNNING = True
    while RUNNING:
        # Pygame event handler.
        events = pygame.event.get()
        for event in events:
            if event.type == QUIT:# If a quit is called, stop running.
                RUNNING = False
    
        clock.tick(FPS) # Tick the clock at our selected FPS
        screen.fill(BLACK) # Fill the screen with
        
        # Create a surface by rendering our font to say the current time
        text_surf = font.render( GetTime(), True, GREEN)
        
        # Flip the text around so it projects to the mirror correctly
        flipped_text_surf = pygame.transform.flip(text_surf, 1, 0)
        
        # Get the center of our text surface
        x1, y1 = flipped_text_surf.get_size()
        x1, y1 = [x1 / 2, y1 / 2]
        
        # Subtrace text center from screen center so we know where to place the surface
        x2, y2 = center
        location = [x2-x1, y2-y1]
        
        # Blit the text surface to the screen in the location we found out
        screen.blit( flipped_text_surf, location)
        
        # Update the screen
        pygame.display.update()
    pygame.quit() # De-initialize and close the window.

if __name__ == '__main__':
    # Don't run if we've been imported as a module or something
    run()
